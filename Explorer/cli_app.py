"""
CLI Application para explorar archivos HEC-RAS HDF5
Aplicaci√≥n de l√≠nea de comandos interactiva
"""

import os
import sys
from pathlib import Path
from typing import List, Dict, Any
import json
from tabulate import tabulate
import argparse

# Agregar el directorio actual al path para importar el explorador
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from hecras_explorer import HECRASExplorer


class HECRASCLIApp:
    """Aplicaci√≥n CLI para explorar archivos HEC-RAS HDF5"""
    
    def __init__(self):
        self.explorer = HECRASExplorer()
        self.current_files: List[str] = []
        self.current_file: str = ""
        
    def print_banner(self):
        """Imprime el banner de la aplicaci√≥n"""
        banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    HEC-RAS HDF5 Explorer                     ‚ïë
‚ïë              Explorador de archivos HEC-RAS HDF5             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        print(banner)
    
    def get_project_path(self) -> str:
        """Solicita al usuario la ruta del proyecto"""
        while True:
            try:
                path = input("\nüìÅ Ingrese la ruta del proyecto HEC-RAS: ").strip()
                
                # Limpiar la ruta de caracteres especiales que pueden venir del pegado
                path = path.replace('"', '').replace("'", '').strip()
                
                if not path:
                    print("‚ùå Por favor ingrese una ruta v√°lida")
                    continue
                
                # Expandir variables de entorno y ruta de usuario
                path = os.path.expanduser(os.path.expandvars(path))
                
                if not os.path.exists(path):
                    print(f"‚ùå La ruta '{path}' no existe")
                    print("üí° Tip: Puede pegar la ruta directamente desde el explorador de archivos")
                    continue
                
                return path
                
            except KeyboardInterrupt:
                print("\n\nüëã ¬°Hasta luego!")
                sys.exit(0)
            except Exception as e:
                print(f"‚ùå Error procesando la ruta: {e}")
                continue
    
    def find_and_display_files(self, project_path: str):
        """Busca y muestra los archivos HDF5 encontrados"""
        try:
            print(f"\nüîç Buscando archivos HDF5 en: {project_path}")
            self.current_files = self.explorer.find_hdf_files(project_path)
            
            if not self.current_files:
                print("‚ùå No se encontraron archivos HDF5 en la ruta especificada")
                return False
                
            print(f"\n‚úÖ Se encontraron {len(self.current_files)} archivo(s) HDF5:")
            
            # Crear tabla con informaci√≥n de archivos
            file_data = []
            for i, file_path in enumerate(self.current_files, 1):
                info = self.explorer.get_file_info(file_path)
                file_data.append([
                    i,
                    info['name'],
                    f"{info['size_mb']:.2f} MB",
                    "‚úÖ" if info['accessible'] else "‚ùå",
                    info['groups_count'],
                    info['datasets_count']
                ])
            
            headers = ["#", "Archivo", "Tama√±o", "Accesible", "Grupos", "Datasets"]
            print(tabulate(file_data, headers=headers, tablefmt="grid"))
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error buscando archivos: {e}")
            return False
    
    def select_file(self) -> bool:
        """Permite al usuario seleccionar un archivo"""
        if not self.current_files:
            print("‚ùå No hay archivos disponibles para seleccionar")
            return False
            
        while True:
            try:
                choice = input(f"\nüìã Seleccione un archivo (1-{len(self.current_files)}) o 'q' para salir: ").strip()
                
                if choice.lower() == 'q':
                    return False
                    
                file_index = int(choice) - 1
                if 0 <= file_index < len(self.current_files):
                    self.current_file = self.current_files[file_index]
                    print(f"‚úÖ Archivo seleccionado: {Path(self.current_file).name}")
                    return True
                else:
                    print(f"‚ùå Selecci√≥n inv√°lida. Ingrese un n√∫mero entre 1 y {len(self.current_files)}")
                    
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero v√°lido")
    
    def show_main_menu(self):
        """Muestra el men√∫ principal de opciones"""
        menu = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        MEN√ö PRINCIPAL                        ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë 1. üìä Ver informaci√≥n general del archivo                    ‚ïë
‚ïë 2. üå≥ Explorar estructura completa                          ‚ïë
‚ïë 3. üéØ Extraer datos espec√≠ficos de HEC-RAS                  ‚ïë
‚ïë 4. üìã Listar todos los datasets                             ‚ïë
‚ïë 5. üíæ Exportar estructura a JSON                            ‚ïë
‚ïë 6. üìÅ Cambiar archivo                                       ‚ïë
‚ïë 7. üîÑ Cambiar proyecto                                      ‚ïë
‚ïë 8. ‚ùå Salir                                                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        print(menu)
    
    def show_file_info(self):
        """Muestra informaci√≥n general del archivo"""
        print(f"\nüìä Informaci√≥n del archivo: {Path(self.current_file).name}")
        print("=" * 60)
        
        info = self.explorer.get_file_info(self.current_file)
        
        info_table = [
            ["Nombre", info['name']],
            ["Ruta", info['path']],
            ["Tama√±o", f"{info['size_mb']:.2f} MB"],
            ["Modificado", info['modified']],
            ["Accesible", "‚úÖ S√≠" if info['accessible'] else "‚ùå No"],
            ["Total Grupos", info['groups_count']],
            ["Total Datasets", info['datasets_count']]
        ]
        
        print(tabulate(info_table, headers=["Propiedad", "Valor"], tablefmt="grid"))
    
    def show_structure(self):
        """Muestra la estructura del archivo en formato √°rbol"""
        print(f"\nüå≥ Estructura del archivo: {Path(self.current_file).name}")
        print("=" * 60)
        
        structure = self.explorer.explore_structure(self.current_file)
        
        if 'error' in structure:
            print(f"‚ùå Error explorando estructura: {structure['error']}")
            return
        
        print(f"üìä Resumen: {structure['total_groups']} grupos, {structure['total_datasets']} datasets")
        print("\nüå≥ Estructura:")
        
        def print_tree(node, prefix="", is_last=True):
            if isinstance(node, dict):
                for i, (key, value) in enumerate(node.items()):
                    is_last_item = i == len(node) - 1
                    current_prefix = "‚îî‚îÄ‚îÄ " if is_last_item else "‚îú‚îÄ‚îÄ "
                    
                    if isinstance(value, dict) and 'type' in value:
                        if value['type'] == 'group':
                            print(f"{prefix}{current_prefix}üìÅ {key}/")
                            next_prefix = prefix + ("    " if is_last_item else "‚îÇ   ")
                            if 'children' in value:
                                print_tree(value['children'], next_prefix, is_last_item)
                        elif value['type'] == 'dataset':
                            shape_str = f"[{', '.join(map(str, value['shape']))}]" if value['shape'] else "[]"
                            print(f"{prefix}{current_prefix}üìÑ {key} {shape_str} ({value['dtype']})")
                    else:
                        print(f"{prefix}{current_prefix}üìÑ {key}")
        
        print_tree(structure['root'])
    
    def extract_hecras_data(self):
        """Extrae y muestra datos espec√≠ficos de HEC-RAS"""
        print(f"\nüéØ Extrayendo datos HEC-RAS de: {Path(self.current_file).name}")
        print("=" * 60)
        
        data = self.explorer.extract_hecras_data(self.current_file)
        
        if 'error' in data:
            print(f"‚ùå Error extrayendo datos: {data['error']}")
            return
        
        # Mostrar metadatos
        print("üìã Metadatos del archivo:")
        metadata_table = [[k, v] for k, v in data['metadata'].items()]
        print(tabulate(metadata_table, headers=["Propiedad", "Valor"], tablefmt="grid"))
        
        # Mostrar resumen de extracci√≥n
        print("\nüìä Resumen de extracci√≥n:")
        summary_table = [[k, v] for k, v in data['extraction_summary'].items()]
        print(tabulate(summary_table, headers=["Tipo de Dato", "Estado"], tablefmt="grid"))
        
        # Mostrar datos extra√≠dos
        print("\nüì¶ Datos extra√≠dos:")
        for category, datasets in data['extracted_data'].items():
            if datasets:
                print(f"\nüîπ {category.upper()}:")
                for dataset_name, dataset_info in datasets.items():
                    shape_str = f"[{', '.join(map(str, dataset_info['shape']))}]"
                    print(f"  ‚Ä¢ {dataset_name}: {shape_str} ({dataset_info['dtype']})")
                    print(f"    Ruta: {dataset_info['path']}")
                    if dataset_info['sample_data']:
                        sample_str = str(dataset_info['sample_data'][:3])
                        if len(dataset_info['sample_data']) > 3:
                            sample_str += "..."
                        print(f"    Muestra: {sample_str}")
    
    def list_datasets(self):
        """Lista todos los datasets del archivo"""
        print(f"\nüìã Todos los datasets en: {Path(self.current_file).name}")
        print("=" * 60)
        
        datasets = self.explorer.list_all_datasets(self.current_file)
        
        if not datasets:
            print("‚ùå No se encontraron datasets en el archivo")
            return
        
        # Crear tabla con informaci√≥n de datasets
        dataset_table = []
        for i, dataset in enumerate(datasets[:20], 1):  # Mostrar solo los primeros 20
            shape_str = f"[{', '.join(map(str, dataset['shape']))}]"
            dataset_table.append([
                i,
                dataset['name'],
                shape_str,
                dataset['dtype'],
                f"{dataset['size_mb']:.3f} MB"
            ])
        
        headers = ["#", "Nombre", "Forma", "Tipo", "Tama√±o"]
        print(tabulate(dataset_table, headers=headers, tablefmt="grid"))
        
        if len(datasets) > 20:
            print(f"\n... y {len(datasets) - 20} datasets m√°s")
        
        print(f"\nTotal: {len(datasets)} datasets")
    
    def export_to_json(self):
        """Exporta la estructura a un archivo JSON"""
        output_file = f"{Path(self.current_file).stem}_structure.json"
        
        try:
            self.explorer.export_structure_to_json(self.current_file, output_file)
            print(f"‚úÖ Estructura exportada a: {output_file}")
        except Exception as e:
            print(f"‚ùå Error exportando: {e}")
    
    def run(self):
        """Ejecuta la aplicaci√≥n principal"""
        self.print_banner()
        
        while True:
            # Obtener ruta del proyecto
            project_path = self.get_project_path()
            
            # Buscar archivos
            if not self.find_and_display_files(project_path):
                continue
            
            # Seleccionar archivo
            if not self.select_file():
                continue
            
            # Men√∫ principal
            while True:
                self.show_main_menu()
                
                choice = input("Seleccione una opci√≥n: ").strip()
                
                if choice == '1':
                    self.show_file_info()
                elif choice == '2':
                    self.show_structure()
                elif choice == '3':
                    self.extract_hecras_data()
                elif choice == '4':
                    self.list_datasets()
                elif choice == '5':
                    self.export_to_json()
                elif choice == '6':
                    if not self.select_file():
                        break
                elif choice == '7':
                    break
                elif choice == '8':
                    print("\nüëã ¬°Hasta luego!")
                    return
                else:
                    print("‚ùå Opci√≥n inv√°lida")
                
                input("\nPresione Enter para continuar...")


def main():
    """Funci√≥n principal"""
    parser = argparse.ArgumentParser(description='HEC-RAS HDF5 Explorer CLI')
    parser.add_argument('--path', '-p', help='Ruta del proyecto HEC-RAS')
    
    args = parser.parse_args()
    
    app = HECRASCLIApp()
    
    if args.path:
        # Modo no interactivo con ruta proporcionada
        if app.find_and_display_files(args.path):
            if len(app.current_files) == 1:
                app.current_file = app.current_files[0]
                print(f"‚úÖ Archivo seleccionado autom√°ticamente: {Path(app.current_file).name}")
            else:
                app.select_file()
    
    app.run()


if __name__ == "__main__":
    main()
